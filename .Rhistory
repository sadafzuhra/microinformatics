setRepositories()
library(readxl)
library(tidyverse)
library(ggplot2)
library(stats)
mpg <-mpg
print(mpg)
summarise(mean =mean(hwy))
data("mpg")
mpg <- mpg
library(corrplot)
corr <- mpg %>%  select(., displ, cyl, cty, hwy) %>%
cor()
library(corrplot)
corrplot(corr, method = "number", type = "full")
corrplot(corr, method = "shade", type = "full")
corrplot(corr, method = "circle", type = "upper", order = "hclust", addrect = TRUE )
corrplot.mixed(corr, lower = "circle", upper = "shade")
mod <- mpg %>%  lm( formula = displ ~ cyl)
summary(mod)
plot(mod, col=2, lwd=1)
par(mfrow = c(2,2))
ggplot(data = mpg, aes(x=cyl, y=displ))+geom_abline(col=2)+
geom_point(col="blue")+geom_smooth(se=FALSE, col="green")
plot(mod, col=2, lwd=1)
ggplot(data=iris, aes(x=Petal.Length, y=Petal.Width)) +
geom_abline(col=2) + geom_point(size=3, col="blue") +
geom_smooth(se=FALSE, col="green", span=10) + theme_classic()
mpg <-mpg
print(mpg)
mpg %>%
summarise(mean = mean(mpg$hwy))
t.test(mpg$hwy , mu =25 )
t.test(mpg$hwy , mu =23 )
t.test(mpg$hwy , mu =23.4 )
mpg %>%
summarise(mean = mean(mpg$cty))
t.test(cty , hwy)
t.test(mpg$cty , hwy)
t.test(mpg$cty , mpg$hwy)
pre_treatment <- rnorm(n= 2000 ,mean= 160 ,sd = 15)
post_treatment <- rnorm(n=2000 , mean = 120 , sd = 15)
t.test(pre_treatment ,post_treatment , paired = TRUE)
if( is.numeric(mpg$hwy))
{
print("highway is a numeric column")
}
{
print("highway is a numeric column")
}else{
if( is.numeric(mpg$manufacturer))
{
print("highway is a numeric column")
}else  {
print("highway is not a numeric column ")
}
View(corr)
data("mpg")
mpg <- mpg
library(corrplot)
mpg %>%  select(., displ, cyl, cty, hwy) %>%
cor()
view(mpg)
setRepositories()
library(readxl)
library(tidyverse)
library(ggplot2)
library(multcomp)
library(mult)
library(multcompView)
library(car)
library(writexl)
# activating repositeries ----
setRepositories()
# activating repositeries ----
setRepositories()
library(readxl)
library(readxl)
library(tidyverse)
library(ggplot2)
library(multcomp)
library(multcompView)
library(car)
library(writexl)
library(readxl)
zonedata <- read_excel("zonedata.xlsx")
View(zonedata)
library(readxl)
zone_data <- read_excel("zonedata.xlsx")
View(zone_data)
# ANOVA ----
# comparison of more than 2 cluster or categories
glimpse(zone_data)
unique(zone_data$farm_location)
df_new <- zone_data %>%
filter(., Bahawalpur, Vehari, Hafizabad )
zone_data %>%
select(., farm_location, kids_mortality) %>%
filter(farm_location %in% c("Bahawalpur", "Vehari","Hafizabad" )) %>%
summarise(locations = unique(farm_location))
zone_data %>%
select(., farm_location, kids_mortality) %>%
filter(farm_location %in% c("Bahawalpur", "Vehari","Hafizabad" )) %>%
summarise(locations = unique(farm_location))
zone_data %>%
select(.,farm_location, kids_mortality) %>%
filter(farm_location %in% c("Bahawalpur", "Vehari","Hafizabad" )) %>%
summarise(locations = unique(farm_location))
zone_data %>%
select(farm_location, kids_mortality) %>%
filter(farm_location %in% c("Bahawalpur", "Vehari","Hafizabad" )) %>%
summarise(locations = unique(farm_location))
zone_data %>%
select(farm_location, kids_mortality) %>%
filter(farm_location %in% c("Bahawalpur", "Vehari", "Hafizabad")) %>%
distinct(farm_location)
zone_data %>%
select(farm_location, kids_mortality) %>%
filter(farm_location %in% c("Bahawalpur", "Vehari", "Hafizabad")) %>%
distinct(farm_location)
zone_zone_data %>%
select(farm_location, kids_mortality) %>%
filter(farm_location %in% c("Bahawalpur", "Vehari", "Hafizabad")) %>%
distinct(farm_location)
zone_data %>%
select(farm_location, kids_mortality) %>%
filter(farm_location %in% c("Bahawalpur", "Vehari", "Hafizabad")) %>%
distinct(farm_location)
View(zone_data)
colnames(zone_data)
zone_data %>%
select("farm_location", "kids_mortality") %>%
filter(farm_location %in% c("Bahawalpur", "Vehari","Hafizabad" )) %>%
summarise(locations = unique(farm_location))
# ANOVA ----
glimpse(zone_data)
unique(zone_data$farm_location)
colnames(zone_data)
zone_data %>%
select("farm_location",
"kids_mortality") %>%
filter(farm_location %in%
c("Bahawalpur", "Vehari","Hafizabad" )) %>%
summarise(locations = unique(farm_location))
library(dplyr)
zone_data %>%
select(farm_location, kids_mortality) %>%
filter(farm_location %in% c("Bahawalpur", "Vehari", "Hafizabad")) %>%
distinct(farm_location)
zone_data %>%
select(.,farm_location, kids_mortality) %>%
filter(farm_location %in% c("Bahawalpur", "Vehari", "Hafizabad")) %>%
distinct(farm_location)
df_new <- zone_data %>%
dplyr::select(farm_location, kids_mortality) %>%
filter(farm_location %in% c("Bahawalpur", "Vehari", "Hafizabad"))
View(df_new)
# comparison of more than 2 cluster or categories
aov(kids_mortality ~ farm_location, data = df_new)
anova <- aov(kids_mortality ~ farm_location, data = df_new)
summary(anova)
# histogram
hist(df_new$kids_mortality ,col = 2)
#qqnorm
qqnorm(df_new$kids_mortality ,col=2)
# shapiro-Wilk test
shapiro.test(df_new$kids_mortality)
# comparison of more than 2 cluster or categories
## assumption of ANOVA----
### normality ditribution----
df_new %>%
group_by(farm_location) %>%
summarise(s_pvalue = shapiro.test(kids_mortality))
# comparison of more than 2 cluster or categories
## assumption of ANOVA----
### normality ditribution----
df_new %>%
group_by(farm_location) %>%
summarise(s_pvalue = shapiro.test(kids_mortality)$p.value)
# shapiro-Wilk test
s <- shapiro.test(df_new$kids_mortality)
anova <- aov(kids_mortality ~ farm_location, data = df_new)
remove(s)
# comparison of more than 2 cluster or categories
## assumption of ANOVA----
### normality ditribution----
df_new %>%
group_by(farm_location) %>%
summarise(s_pvalue = shapiro.test(kids_mortality)$p.value)
# activating repositeries ----
setRepositories()
# activating repositeries ----
setRepositories()
# activating repositeries ----
setRepositories()
library(readxl)
library(tidyverse)
library(ggplot2)
library(multcomp)
library(multcompView)
library(car)
library(writexl)
# ANOVA ----
glimpse(zone_data)
# ANOVA ----
glimpse(zone_data)
unique(zone_data$farm_location)
colnames(zone_data)
df_new <- zone_data %>%
dplyr::select(farm_location, kids_mortality) %>%
filter(farm_location %in% c("Bahawalpur", "Vehari", "Hafizabad"))
# comparison of more than 2 cluster or categories
## assumption of ANOVA----
### normality ditribution----
df_new %>%
group_by(farm_location) %>%
summarise(s_pvalue = shapiro.test(kids_mortality)$p.value)
# histogram
hist(df_new$kids_mortality ,col = 2)
# histogram
hist(df_new$kids_mortality ,col = 4)
# histogram
hist(df_new$kids_mortality ,col = 6)
#qqnorm
qqnorm(df_new$kids_mortality ,col=2)
# shapiro-Wilk test
shapiro.test(df_new$kids_mortality)
anova <- aov(kids_mortality ~ farm_location, data = df_new)
summary(anova)
hist(anova$residuals)
qqnorm(anova$residuals)
shapiro.test(anova$residuals)
oneway.test(kids_mortality ~ farm_location, data = df_new , var.equal = TRUE)
oneway.test(kids_mortality ~ farm_location, data = df_new , var.equal = FALSE)
df_new_1 <- as.factor(df_new$farm_location)
anova_1 <- aov(kids_mortality ~ farm_location, data = df_new_1)
##post-HOC test on "df_new" Data----
as.factor(df_new$farm_location)
##post-HOC test on "df_new" Data----
df_new$farm_location <- as.factor(df_new$farm_location)
anova <- aov(kids_mortality ~ farm_location, data = df_new)
tuky_1 <- glht(anova,
linfct = mcp(farm_location = "tukey"))
tukey <- glht(anova,
linfct = mcp(farm_location = "tukey"))
library(multcomp)
tukey <- glht(anova,
linfct = mcp(farm_location = "tukey"))
tukey <- glht(anova,
linfct = mcp(farm_location = "Tukey"))
View(tukey)
summary(tukey)
TukeyHSD(anova)
plot(tukey)
plot(tukey , col= 2)
plot(TukeyHSD(anova))
ToothGrowth
tooth_data <- ToothGrowth
View(tooth_data)
glimpse(tooth_data)
tooth_data$dose <- as.factor(tooth_data$dose)
glimpse(tooth_data)
aov(len ~ supp*dose)
aov(len ~ supp*dose data = tooth_data)
aov(len ~ supp*dose ,data = tooth_data)
#assumption for tooth_daat
hist(tooth_data$len)
anova_2 <-aov(len ~ supp*dose ,data = tooth_data)
summary(anova_2)
hist(anova_2$residuals)
tukey_2<-  TukeyHSD(anova_2)
plot(tukey_2 , col= 2)
summary(tukey_2)
TukeyHSD(anova_2)
dunnet(anova_2)
Dunnet(anova_2)
zone_data$season <- as.factor(zone_data$season)
glimpse(zone_data)
zone_data$farm_location <- as.factor(zone_data$farm_location)
anova_3 <- aov(kids_mortality ~season*farm_location, data = zone_data)
#post-hoc test on zone data
tukey_3 <- TukeyHSD(anova_3)
TukeyHSD(anova_3)
plot(TukeyHSD(anova_3))
library(multcompView)
letters <- multcompLetters4(anova_3, tukey_3)
summary(letters)
letters <- data.frame(letters$`season:farm_location`$letters)
View(letters)
letters <- data.frame(letters$`season:farm_location`$letters)
letters_1 <- data.frame(letters$`season:farm_location`$letters)
letters <- multcompLetters4(anova_3, tukey_3)
View(letters)
letters_1 <- data.frame(letters$`season:farm_location`$letters)
remove(letters_1)
letters <- data.frame(letters$`season:farm_location`$letters)
letters <- multcompLetters4(anova_3, tukey_3)
View(df_new)
View(letters)
letters <- data.frame(letters$`season:farm_location`$Letters)
zone_data %>%
dplyr::select( farm_location, season, kids_mortality)
zone_data %>%
dplyr::select( farm_location, season, kids_mortality) %>%
group_by(farm_location, season) %>%
summarise(averages= mean(kids_mortality), sd= sd( kids_mortality))
final_zone_data<-  zone_data %>%
dplyr::select( farm_location, season, kids_mortality) %>%
group_by(farm_location, season) %>%
summarise(averages= mean(kids_mortality), sd= sd( kids_mortality))
View(final_zone_data)
unique(final_zone_data$farm_location)
final_zone_data <- final_zone_data %>% filter(farm_location %in% c("Bahawalpur" ,"Hafizabad", "Vehari"))
View(final_zone_data)
ggplot(data = final_zone_data, mapping = aes(x = farm_location, y= averages, group = season ))+
geom_bar(stat = "identity", position = position_dodge(0.9))
ggplot(data = final_zone_data, mapping = aes(x = farm_location, y= averages, group = season, fill = season ))+
geom_bar(stat = "identity", position = position_dodge(0.9))
ggplot(data = final_zone_data, mapping = aes(x = farm_location, y= averages, group = season, fill = season ))+
geom_bar(stat = "identity", position = position_dodge(0.9))+
geom_errorbar(aes(ymin = averages-sd, ymax = averages+sd))
ggplot(data = final_zone_data, mapping = aes(x = farm_location, y= averages, group = season, fill = season ))+
geom_bar(stat = "identity", position = position_dodge(0.9))+
geom_errorbar(aes(ymin = averages-sd, ymax = averages+sd), width = 0.1)
ggplot(data = final_zone_data, mapping = aes(x = farm_location, y= averages, group = season, fill = season ))+
geom_bar(stat = "identity", position = position_dodge(0.9))+
geom_errorbar(aes(ymin = averages-sd, ymax = averages+sd), width = 0.1,
position = position_dodge(0.9))
final_zone_data<-  zone_data %>%
dplyr::select( farm_location, season, kids_mortality) %>%
group_by(farm_location, season) %>%
summarise(averages= mean(kids_mortality), sd= sd( kids_mortality)) %>%
arrange(desc(averages))
final_zone_data <- final_zone_data %>% filter(farm_location %in% c("Bahawalpur" ,"Hafizabad", "Vehari"))
## two way anova on zone data----
zone_data<-   zone_data %>%
dplyr::select( farm_location, season, kids_mortality)
zone_data$farm_location <- as.factor(zone_data$farm_location)
#post-hoc test on zone data
tukey_3 <- TukeyHSD(anova_3)
anova_3 <- aov(kids_mortality ~season*farm_location, data = zone_data)
#post-hoc test on zone data
tukey_3 <- TukeyHSD(anova_3)
letters <- multcompLetters4(anova_3, tukey_3)
letters <- data.frame(letters$`season:farm_location`$Letters)
View(letters)
group_by(farm_location, season) %>%
summarise(averages= mean(kids_mortality), sd= sd( kids_mortality)) %>%
arrange(desc(averages))
View(final_zone_data)
group_by($farm_location, season) %>%
group_by(farm_location, season) %>%
summarise(averages= mean(kids_mortality), sd= sd( kids_mortality)) %>%
arrange(desc(averages))
final_zone_data<- zone_data %>%
group_by(farm_location, season) %>%
summarise(averages= mean(kids_mortality), sd= sd( kids_mortality)) %>%
arrange(desc(averages))
final_zone_data <- final_zone_data %>% filter(farm_location %in% c("Bahawalpur" ,"Hafizabad", "Vehari"))
## two way anova on zone data----
zone_data<-   zone_data %>%
dplyr::select( farm_location, season, kids_mortality)  %>%
filter(farm_location %in% c("Bahawalpur" ,"Hafizabad", "Vehari"))
zone_data$season <- as.factor(zone_data$season)
zone_data$farm_location <- as.factor(zone_data$farm_location)
anova_3 <- aov(kids_mortality ~season*farm_location, data = zone_data)
#post-hoc test on zone data
tukey_3 <- TukeyHSD(anova_3)
plot(TukeyHSD(anova_3))
#post-hoc test on zone data
tukey_3 <- TukeyHSD(anova_3)
letters <- multcompLetters4(anova_3, tukey_3)
letters <- data.frame(letters$`season:farm_location`$Letters)
View(letters)
final_zone_data<- zone_data %>%
group_by(farm_location, season) %>%
summarise(averages= mean(kids_mortality), sd= sd( kids_mortality)) %>%
arrange(desc(averages))
final_zone_data$letters <- letters$letters..season.farm_location..Letters
ggplot(data = final_zone_data, mapping = aes(x = farm_location, y= averages, group = season, fill = season ))+
geom_bar(stat = "identity", position = position_dodge(0.9))+
geom_errorbar(aes(ymin = averages-sd, ymax = averages+sd), width = 0.1,
position = position_dodge(0.9))+
geom_text(aes(label = letters, y= averages+sd),
position = position_dodge(0.9), vjust= -0.4)+
theme_minimal()+scale_fill_manual(values = "red", "blue")+ylim(0,100)
rlang::last_trace()
ggplot(data = final_zone_data, mapping = aes(x = farm_location, y = averages, group = season, fill = season)) +
geom_bar(stat = "identity", position = position_dodge(0.9)) +
geom_errorbar(aes(ymin = averages - sd, ymax = averages + sd), width = 0.1,
position = position_dodge(0.9)) +
geom_text(aes(label = letters, y = averages + sd),
position = position_dodge(0.9), vjust = -0.4) +
theme_minimal() +
scale_fill_manual(values = c("red", "blue")) +
ylim(0, 100) +
labs(title = "Average Values by Farm Location and Season",
x = "Farm Location",
y = "Averages",
fill = "Season")
my_plot<-  ggplot(data = final_zone_data, mapping = aes(x = farm_location, y = averages, group = season, fill = season)) +
geom_bar(stat = "identity", position = position_dodge(0.9)) +
geom_errorbar(aes(ymin = averages - sd, ymax = averages + sd), width = 0.1,
position = position_dodge(0.9)) +
geom_text(aes(label = letters, y = averages + sd),
position = position_dodge(0.9), vjust = -0.4) +
theme_minimal() +
scale_fill_manual(values = c("red", "blue")) +
ylim(0, 100) +
labs(title = "Average Values by Farm Location and Season",
x = "Farm Location",
y = "Averages",
fill = "Season")
View(my_plot)
# Save the plot using ggsave
ggsave("my_plot.png", plot = my_plot, width = 10, height = 6, dpi = 300)
# Save the plot using ggsave
ggsave("my_plot.png", plot = my_plot, width = 10, height = 6)
setRepositories()
setRepositories()
install.packages("sf", dependencies = TRUE)
install.packages("rnaturalearth", dependencies = TRUE)
library(readxl)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
# making plots ----
world <- ne_countries(scale = "medium",
returnclass = "sf")
View(world)
# practice plot 1
ggplot(data=world,  aes(fill = income_grp)) +geom_sf() + theme_map() + scale_fill_viridis_d()
world %>%
ggplot(aes(fill = income_grp)) +geom_sf() + theme_map() + scale_fill_viridis_d()
world %>%
filter(region_un=="Africa") %>%
ggplot() +
geom_sf(aes(fill= pop_est/1e6),
color= "white",
lwd = 0.3) +
theme_map()
world %>%
filter(region_un=="Asia") %>%
ggplot() +
geom_sf(aes(fill= pop_est/1e6),
color= "white",
lwd = 0.3) +
theme_map()
world %>%
filter(region_un=="Europe") %>%
ggplot() +
geom_sf(aes(fill= pop_est/1e6),
color= "white",
lwd = 0.3) +
theme_map()
install.packages("janitor", dependencies = )
install.packages("giscoR", dependencies = TRUE)
library(tidyverse)
library(janitor)
library(giscoR)
gisco_get_nuts( country = 'Germany') %>%
as_tibble() %>%
janitor::clean_names() %>%
count(levl_code)
gisco_get_nuts( country = 'Germany',
nuts_level = 3,
year = "2021") %>%
as_tibble() %>%
janitor::clean_names()
germany_dist <- gisco_get_nuts( country = 'Germany',
nuts_level = 3,
year = "2021",
epsg = 3035) %>%
as_tibble() %>%
janitor::clean_names()
germany_states <- gisco_get_nuts( country = 'Germany',
nuts_level = 1,
year = "2021",
epsg = 3035) %>%
as_tibble() %>%
janitor::clean_names()
germany_dist %>%
ggplot(aes(geometry = geometry))+ geom_sf()
germany_dist %>%
ggplot(aes(geometry = geometry))+ geom_sf( data = germany_states,
aes(fill= nuts_name,
color = "black",
lwd = 0.5)) + geom_sf( fill= NA,
color = "black",
lwd = 0.5)
setRepositories()
setRepositories()
if (!requireNamespace("BiocManager" , quietly = TRUE) )
install.packages("BiocManager")
BiocManager::install(c('qvalue' , 'plot3D' , 'ggplot2','pheatmap','cowplot',
'cluster','NbClust','fastICA','NMF','matrixStats',
'Rtsne','mosaic','knitr','genomation',
'ggbio','Gviz','DESeq2','RUVSeq','gProfileR','ggfortify','corrplot',
'gage','EDASeq','citr','formatR',
'svglite','Rqc','ShortRead','QuasR',
'methylKit','FactoMineR', 'iClusterPlus',
'enrichR','caret','xgboost','glmnet',
'DALEX','kernlab','pROC','nnet','RANN',
'ranger','GenoInfoDb','GenomicRanges',
'GenomicAlignments','ComplexHeatmap','circlize',
'BSgenome.Hsapiens.UCSC.hg19','tidyr',
'AnnotationHub' , 'GenomicFeatures' , 'normr' ,
' MotifDb' ,'TFBSTools' ,'rGADEM' , 'JASPAR2018'
))
